/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <ColorChat>

#define PLUGIN "# Addons: Flagged Player"
#define VERSION "1.0"
#define AUTHOR "ReVKa"

#define c(%1) charsmax(%1)
#define LOG_FILE "addons/amxmodx/logs/A_FlaggingPlayer.log"
#define ACESS ADMIN_BAN

new g_file_path[64];
new g_max_players;
new Id,Time;

new g_Time[][] = 
{
	"15 minutes",
	"30 minutes",
	"60 minutes",
	"2 Hours",
	"6 Hours",
	"1 Day",
	"3 Days",
	"1 Week",
	"Permament"
}
new g_Time_Handle[][] =  // Exapmle 1 hour = 1*60; 1 day =  1*1440; 1 week = 1*10080
{
	"15",
	"30",
	"60",
	"120",
	"360",
	"1440",
	"4320",
	"10080",
	"0"
}
public plugin_init() {
  
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	get_datadir(g_file_path,63)
	add(g_file_path,63,"/FlaggedPlayer.txt")
	
	register_concmd("amx_flagged", "CmdFlagged", ACESS, "<nick, #userid, authid> <time in minutes> <reason>");
	register_concmd("amx_flaggedmenu", "CmdFlaggedMenu", ACESS, "Show Flagged Menu");
	register_clcmd("___print_you_values","ReasonHande",-1);
	
	if(!file_exists(g_file_path))
	{
		log_to_file(LOG_FILE,"[Flagged Player] File Not Exists - Create <%s>",g_file_path)
		new f = fopen(g_file_path,"a+")
		
		fprintf(f,";File of <Flagged Player> Version <%s> Author <%s>^n",VERSION,AUTHOR)
		fprintf(f,";Format <Name> <SteamID> <IP> <Time of UnFlagged> <Reason>^n^n")
		fclose(f);
	}
	
	g_max_players = get_maxplayers()
	Id=0
}
public client_authorized(id)
{
	static ip[26],authid[26],name[32];
	
	get_user_name(id, name, c(name))
	get_user_authid(id, authid, c(authid))
	get_user_ip(id,ip,c(ip),1)
	
	new f = fopen(g_file_path,"rt")
	static data[256];
	
	static names[32], ips[23], steamid[26],times[12],reason[64];
	while(!feof(f))
	{
		fgets(f,data,255)
		parse(data, names, 31, steamid, 25, ips, 22,times, 11, reason, 63)
		
		if(data[0] == ';' || !data[0])	continue;
		
		remove_quotes(names)
		remove_quotes(steamid)
		remove_quotes(ips)
		remove_quotes(times)
		remove_quotes(reason)
		
		if(equal(name,names) || equal(ip,ips) || equal(authid, steamid))
		{
			if(str_to_num(times) - get_systime(0) < 0 && str_to_num(times) != 0)
				break;
				
			log_to_file(LOG_FILE,"[Flagged Player] Flagged %s (%s) [%s][%s] connected to server",name,names,authid,ip)
			log_amx("[Flagged Player] Flagged %s (%s) [%s][%s] connected to server",name,names,authid,ip)
			
			for(new j = 0; j<=g_max_players;j++)
			{
				if(!is_user_connected(j) || !(get_user_flags(j) & ACESS) || j == id)
					continue;
			
				ColorChat(j,RED,"^1[^4Flagged^1] Flagged^4 %s^1 (^4%s^1) [^3Reason - %s^1] connected to server",name,names,reason)
			}
			
			break;
			
		}
	}
	fclose(f);
}
public CmdFlagged(client, level, cid)
{
	if( !cmd_access(client, level, cid, 4) ) return PLUGIN_HANDLED;
	
	static arg[64];
	read_argv(1, arg, sizeof(arg) - 1);
	
	new target = look_for_player(client, arg) 
	if(target == -1 || target == -2)
		return PLUGIN_HANDLED
	
	read_argv(2, arg, sizeof(arg) - 1);
	
	new length = str_to_num(arg);
	
	read_argv(3, arg, sizeof(arg) - 1);
	
	AddFlaggedPlayer(client,target,length, arg)
	return PLUGIN_HANDLED;
}
public CmdFlaggedMenu(client, level, cid)
{
	if( !cmd_access(client, level, cid, 1) ) return PLUGIN_HANDLED;
	
	new menu = menu_create("\w[\yFlagged Players\w] Players Menu^n\dChoose Player for Flagged", "FlaggedHandle");
	
	new players[32], pnum, tempid;
	new szName[32], szTempid[10];
    
	get_players(players, pnum);
	
	for( new i; i<pnum; i++ )
	{
		tempid = players[i];
		
		get_user_name(tempid, szName, 31);
		num_to_str(tempid, szTempid, 9);
		
		menu_additem(menu, szName, szTempid, 0);
	}
	
	menu_display(client, menu, 0);
	return PLUGIN_HANDLED;
}
public FlaggedHandle(id, menu, item)
{
	if( item == MENU_EXIT )
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new data[6], iName[64];
	new access, callback;
	menu_item_getinfo(menu, item, access, data,5, iName, 63, callback);
	
	Id = str_to_num(data)
	if(get_user_flags(Id) & ACESS)
		return PLUGIN_HANDLED;
	menu_destroy(menu);
	CmdFlaggedMenuTime(id)
	return PLUGIN_HANDLED;
}
public CmdFlaggedMenuTime(client)
{
	new menu = menu_create("\w[\yFlagged Players\w] Time Menu^n\dChoose Time for Flagged", "FlaggedHandleTime");
	
	for( new i; i<sizeof(g_Time); i++ )
	{	
		menu_additem(menu, g_Time[i], g_Time_Handle[i], 0);
	}
	
	menu_display(client, menu, 0);
}
public FlaggedHandleTime(id, menu, item)
{
	if( item == MENU_EXIT )
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new data[6], iName[64];
	new access, callback;
	menu_item_getinfo(menu, item, access, data,5, iName, 63, callback);
	
	Time = str_to_num(data)
	menu_destroy(menu);
	
	client_cmd(id, "messagemode ___print_you_values");
	ColorChat(id,RED,"^1[^4FlaggedPlayers^1] Please enter^3 the reason ^1of Flagging Player")
	return PLUGIN_HANDLED;
}
public AddFlaggedPlayer(const adm,const id, lenght, reason[])
{
	new ip[26],authid[26],name[32];
	
	get_user_name(id, name, c(name))
	get_user_authid(id, authid, c(authid))
	get_user_ip(id,ip,c(ip),1)
	
	if(!CheckFlagged(name, ip, authid))
		return client_print(adm,print_console,"[Flagged Player] Player %s [%s][%s] is already Flagged",name,authid,ip)
	
	new formatx[150];
	formatex(formatx,c(formatx),"^"%s^" ^"%s^" ^"%s^" %i ^"%s^"",name,authid,ip,lenght == 0 ? 0 : (get_systime(0) + lenght*60), reason)
	write_file(g_file_path,formatx,-1)
	for(new j = 0; j<=g_max_players;j++)
	{
		if(!is_user_connected(j) || !(get_user_flags(j) & ACESS) || j == id)
			continue;
			
		ColorChat(j,RED,"^1[^4FlaggedPlayers^1]^4 %s^1 (^3%s^1) got ^4 Flagged^1 for %d minutes, Reason %s",name,ip,lenght,reason)
	}
	
	return log_to_file(LOG_FILE,"[Flagged Player] Player %s [%s][%s] got successfully Flagged for %d minutes, Reason %s",name,ip,authid,lenght,reason)
}
public CheckFlagged(name[], ip[], authid[])
{
	new f = fopen(g_file_path,"rt")
	static data[256];
	
	static names[32], ips[23], steamid[26]
	while(!feof(f))
	{
		fgets(f,data,255)
		parse(data, names, 31, steamid, 25, ips, 22)
		
		if(data[0] == ';' || !data[0])	continue;
		
		remove_quotes(names)
		remove_quotes(steamid)
		remove_quotes(ips)
		
		if(equal(name,names) || equal(ip,ips) || equal(authid, steamid))
		{
			fclose(f);
			return 0
		}
	}
	fclose(f);
	
	return 1
}
// =========================================== [STOCK Function] ================================================
stock look_for_player(id, const identifier[]) 
{
	new player = find_player("c", identifier)

	if(!player) 
		player = find_player("bl", identifier)
	
	if(!player) 
		player = find_player("d", identifier)

	if(!player && identifier[0]=='#' && identifier[1]) 
		player = find_player("k", str_to_num(identifier[1]))

	if(player) 
	{
		if(id != player)
		{
			if(get_user_flags(player) & ACESS)
			{
				console_print(id, "[Flagged Player] Client has immunity")
				return -2
			}
		}
	} 
	else
		player = -1
	
	return player
}
public ReasonHande(id)
{
	static arg[64];
	read_argv(1, arg, charsmax(arg));
	
	if ( !strlen(arg) )
	{
		client_print(id,print_chat, "You can't set a transferred points blank! Please type a new value.");
		
		client_cmd(id,"messagemode ___print_you_values");
		return PLUGIN_HANDLED;
	}
	
	AddFlaggedPlayer(id,Id,Time,arg);
	return PLUGIN_HANDLED;
}
